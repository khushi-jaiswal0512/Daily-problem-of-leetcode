class GfG {
    static int st[];

    // Function to build the segment tree
    public static void buildSegmentTree(int i, int l, int r, int arr[]) {
        if (l == r) {
            st[i] = arr[l];
            return;
        }

        int mid = l + (r - l) / 2;
        buildSegmentTree(2 * i + 1, l, mid, arr);
        buildSegmentTree(2 * i + 2, mid + 1, r, arr);
        st[i] = Math.min(st[2 * i + 1], st[2 * i + 2]);
    }

    // Function to construct the segment tree
    public static int[] constructST(int arr[], int n) {
        // Allocate memory for segment tree
        int height = (int) Math.ceil(Math.log(n) / Math.log(2));
        int size = 2 * (int) Math.pow(2, height) - 1;
        st = new int[size];

        // Build the segment tree
        buildSegmentTree(0, 0, n - 1, arr);

        return st;
    }

    // Function to query the segment tree for minimum value in range [l, r]
    public static int querySegmentTree(int start, int end, int i, int l, int r) {
        // If the range is completely outside the current node range
        if (l > end || r < start) {
            return Integer.MAX_VALUE;
        }

        // If the range is completely inside the current node range
        if (l >= start && r <= end) {
            return st[i];
        }

        // If the range is partially inside and outside the current node range
        int mid = l + (r - l) / 2;
        return Math.min(querySegmentTree(start, end, 2 * i + 1, l, mid),
                        querySegmentTree(start, end, 2 * i + 2, mid + 1, r));
    }

    // Function to return the minimum element in the range from l to r
    public static int RMQ(int st[], int n, int l, int r) {
        return querySegmentTree(l, r, 0, 0, n - 1);
    }
}

class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        UnionFind aliceUF = new UnionFind(n);
        UnionFind bobUF = new UnionFind(n);
        
        int aliceEdges = 0;
        int bobEdges = 0;
        int removableEdges = 0;

        // Sort edges so that type 3 edges come first
        Arrays.sort(edges, (a, b) -> b[0] - a[0]);

        for (int[] edge : edges) {
            int t = edge[0], u = edge[1] - 1, v = edge[2] - 1;
            if (t == 3) {
                if (aliceUF.union(u, v)) {
                    bobUF.union(u, v);
                    aliceEdges++;
                    bobEdges++;
                } else {
                    removableEdges++;
                }
            } else if (t == 1) {
                if (aliceUF.union(u, v)) {
                    aliceEdges++;
                } else {
                    removableEdges++;
                }
            } else if (t == 2) {
                if (bobUF.union(u, v)) {
                    bobEdges++;
                } else {
                    removableEdges++;
                }
            }
        }

        if (aliceEdges == n - 1 && bobEdges == n - 1) {
            return removableEdges;
        }
        return -1;
    }
    
    public static void main(String[] args) {
        int n = 4;
        int[][] edges = {
            {3, 1, 2},
            {3, 2, 3},
            {1, 1, 3},
            {1, 2, 4},
            {1, 1, 2},
            {2, 3, 4}
        };
        
        Solution sol = new Solution();
        int result = sol.maxNumEdgesToRemove(n, edges);
        System.out.println(result);  // Output: 2
        
        // Example of using segment tree
        int[] arr = {1, 3, 2, 7, 9, 11};
        int arrLen = arr.length;
        GfG g = new GfG();
        int[] st = g.constructST(arr, arrLen);
        
        int l = 1, r = 5;
        System.out.println("Minimum of values in range [" + l + ", " + r + "] is " + g.RMQ(st, arrLen, l, r));
    }
}

class UnionFind {
    private int[] parent;
    private int[] rank;

    public UnionFind(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
        }
    }

    public int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }

    public boolean union(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);
        if (rootU != rootV) {
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
            return true;
        }
        return false;
    }
}
