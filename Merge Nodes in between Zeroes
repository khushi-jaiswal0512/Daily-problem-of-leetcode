class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    
    // Deserialize method to convert string to ListNode
    public static ListNode deserialize(String data) {
        String[] values = data.replace("[", "").replace("]", "").split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (String value : values) {
            current.next = new ListNode(Integer.parseInt(value.trim()));
            current = current.next;
        }
        return dummy.next;
    }
    
    // Serialize method to convert ListNode to string
    public static String serialize(ListNode head) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        while (head != null) {
            sb.append(head.val);
            if (head.next != null) {
                sb.append(",");
            }
            head = head.next;
        }
        sb.append("]");
        return sb.toString();
    }
}

public class Solution {
    public ListNode mergeNodes(ListNode head) {
        // Pointer to traverse the original list, skipping the first zero
        ListNode current = head.next;
        ListNode newHead = new ListNode(0); // Dummy node for the new list
        ListNode tail = newHead;
        
        int sum = 0;
        
        while (current != null) {
            if (current.val == 0) {
                // If sum is greater than 0, add a new node with the sum
                if (sum > 0) {
                    tail.next = new ListNode(sum);
                    tail = tail.next;
                }
                // Reset the sum for the next segment
                sum = 0;
            } else {
                // Accumulate the sum between zeros
                sum += current.val;
            }
            current = current.next;
        }
        
        return newHead.next; // Skip the dummy node and return the real head
    }

    // Main method for testing
    public static void main(String[] args) {
        ListNode head = ListNode.deserialize("[0,3,1,0,4,5,2,0]");
        Solution solution = new Solution();
        ListNode result = solution.mergeNodes(head);
        System.out.println(ListNode.serialize(result)); // Output: [4,11]
        
        head = ListNode.deserialize("[0,1,0,3,0,2,2,0]");
        result = solution.mergeNodes(head);
        System.out.println(ListNode.serialize(result)); // Output: [1,3,4]
    }
}
