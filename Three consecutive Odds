class Solution {
    // Method to check for three consecutive odd numbers
    public boolean threeConsecutiveOdds(int[] arr) {
        // Iterate through the array
        for (int i = 0; i < arr.length - 2; i++) {
            // Check if the current element and the next two elements are odd
            if (arr[i] % 2 != 0 && arr[i + 1] % 2 != 0 && arr[i + 2] % 2 != 0) {
                return true;
            }
        }
        return false;
    }

    // Other methods (Approach-1, LCS, longestPalindromeSubseq) remain unchanged
    public int LCS(String s1, String s2, int m, int n) {
        int[][] t = new int[m + 1][n + 1];

        for (int row = 0; row < m + 1; row++) {
            t[row][0] = 0;
        }

        for (int col = 0; col < n + 1; col++) {
            t[0][col] = 0;
        }

        for (int i = 1; i < m + 1; i++) {
            for (int j = 1; j < n + 1; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    t[i][j] = 1 + t[i - 1][j - 1];
                } else {
                    t[i][j] = Math.max(t[i][j - 1], t[i - 1][j]);
                }
            }
        }

        return t[m][n];
    }

    public int longestPalindromeSubseq(String s) {
        String s1 = new StringBuilder(s).reverse().toString();
        int m = s.length();

        return LCS(s, s1, m, m); // Approach-1
    }
}
